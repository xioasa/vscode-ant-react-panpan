{
  "handleTableChange": {
    "prefix": ".handleTableChange",
    "body": [
      "/**",
      " * 分页",
      " * @param  {[type]} page    [description]",
      " * @param  {[type]} filters [description]",
      " * @param  {[type]} sorter  [description]",
      " * @return {[type]}         [description]",
      " */",
      " handleTableChange = (page, filters, sorter) => {",
      "   $1",
      " }"
    ],
    "description": "表格onChange"
  },

  "formValidateFields": {
    "prefix": ".formValue",
    "body": [
      "form.validateFields((err, values) => {",
      "  if(!err) {",
      "    $1",
      "  }",
      "}"
    ],
    "description": "获取多个表单值并校验"
  },

  "resetFields": {
    "prefix": ".formresetFields",
    "body": [
      "form.resetFields($1)"
    ],
    "description": "重置表单form.resetFields()"
  },

  "setFieldsValue": {
    "prefix": ".formsetFieldsValue",
    "body": [
      "form.setFieldsValue({$1})"
    ],
    "description": "设置表单对应的字段form.setFieldsValue"
  },

  "getFieldValue": {
    "prefix": ".formgetFieldValue",
    "body": [
      "form.getFieldValue('$1')"
    ],
    "description": "获取单个表单值"
  },

  "getFieldsValue": {
    "prefix": ".formgetFieldsValue",
    "body": [
      "form.getFieldsValue([$1])"
    ],
    "description": "获取多个表单值"
  },

  "tableAddRender": {
    "prefix": ".tableAddRender",
    "body": [
      "util.tableAddRender($1, '$2', (text, record) => {$3}"
    ],
    "description": "表格渲染"
  },

  "actionFetch": {
    "prefix": ".fetch",
    "body": [
      "/**",
      " * 获取数据",
      " * @return {[type]} [description]",
      " */",
      "export function fetch(param) {",
      "  return (dispatch) => {",
      "    return fetchutil.get('url', { param }).then((res) => {",
      "      res.data && dispatch({ type: '', data: res.data });",
      "      return res;",
      "    });",
      "  };",
      "}"
    ],
    "description": "get请求数据"
  },

  "actionSubmit": {
    "prefix": ".submit",
    "body": [
      "/**",
      " * 提交数据",
      " * @return {[type]} [description]",
      " */",
      "export function submit(param) {",
      "  return (dispatch) => {",
      "    return fetchutil.post('url', { param });",
      "  };",
      "}"
    ],
    "description": "get请求数据"
  },

  "store": {
    "prefix": ".store",
    "body": [
      "/**",
      " * 数据",
      " * @param  {Array}  state  [description]",
      " * @param  {[type]} action [description]",
      " * @return {[type]}        [description]",
      " */",
      "const $1 = (state = $2, action) => {",
      "  switch (action.type) {",
      "    case '$3':",
      "      return action.data;",
      "    default:",
      "      return state;",
      "  }",
      "};"
    ],
    "description": "store仓库"
  },

  "log": {
    "prefix": ".log",
    "body": [
      "console.log('$1', $1);"
    ],
    "description": "console.log()"
  },

  "handleSaveDataToRouter": {
    "prefix": ".saveDataToRouter",
    "body": [
      "/**",
      "  * 储存数据到路由中",
      "  * @param {Object} data [description]",
      "  * @param {String} pathname [description]",
      "  */",
      "handleSaveDataToRouter = (data, pathname = '') => {",
      "  const { location } = this.props;",
      "  hashHistory.push({",
      "    pathname: pathname || location.pathname,",
      "    state: data,",
      "  });",
      "}"
    ],
    "description": "储存数据到路由中"
  },

  "handleGetDataToRouter": {
    "prefix": ".getDataToRouter",
    "body": [
      "/**",
      "  * 获取存在路由中的数据",
      "  */",
      "handleGetDataToRouter = () => {",
      "  const { location } = this.props;",
      "  const { state = {} } = location;",
      "  return state;",
      "}"
    ],
    "description": "获取存在路由中的数据"
  }
}