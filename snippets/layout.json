{
  "index.child": {
    "prefix": ".index.child",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { Scrollbars } from 'react-custom-scrollbars';",
      "import { message, Table, DatePicker, Button, Form, Input, Row, Col, Modal, Radio, TimePicker, Popconfirm, Select, Tabs } from 'antd';",
      "import { util } from 'util';",
      "import { PageWrapper, Patient } from 'component';",
      "import {",
      "  fetchactionFunction",
      "} from './action';",
      "const Header = PageWrapper.Header;",
      "const Bodyer = PageWrapper.Bodyer;",
      "const Footer = PageWrapper.Footer;",
      "const FormItem = Form.Item;",
      "class $1 extends React.Component {",
      "  state = {}",
      "  componentDidMount() {",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <PageWrapper diff={80} border>",
      "        <Header>",
      "        </Header>",
      "        <Bodyer>",
      "        </Bodyer>",
      "        <Footer>",
      "        </Footer>",
      "      </PageWrapper>",
      "    );",
      "  }",
      "}",
      "export default connect((state) => {",
      "  return {",
      "    data: state,",
      "    cache: state,",
      "  };",
      "})(Form.create()($1));",
      ""
    ],
    "description": "index页面构建包含<Header /><Bodyer /><Footer />"
  },
  "index": {
    "prefix": ".index",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { Scrollbars } from 'react-custom-scrollbars';",
      "import { message, Table, DatePicker, Button, Form, Input, Row, Col, Modal, Radio, TimePicker, Popconfirm, Select, Tabs } from 'antd';",
      "import { util } from 'util';",
      "import { PageWrapper, Patient } from 'component';",
      "import {",
      "  fetchactionFunction",
      "} from './action';",
      "const Header = PageWrapper.Header;",
      "const Bodyer = PageWrapper.Bodyer;",
      "const Footer = PageWrapper.Footer;",
      "const FormItem = Form.Item;",
      "class $1 extends React.Component {",
      "  state = {}",
      "  componentDidMount() {",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <PageWrapper diff={80} border>",
      "      </PageWrapper>",
      "    );",
      "  }",
      "}",
      "export default connect((state) => {",
      "  return {",
      "    data: state,",
      "    cache: state,",
      "  };",
      "})(Form.create()($1));",
      ""
    ],
    "description": "index页面构建不包含<Header /><Bodyer /><Footer />"
  },
  "index.tableListPage": {
    "prefix": ".index.tableListPage",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { Scrollbars } from 'react-custom-scrollbars';",
      "import { message, Table, DatePicker, Button, Form, Input, Row, Col, Modal, Radio, TimePicker, Popconfirm, Select, Tabs } from 'antd';",
      "import { util } from 'util';",
      "import { PageWrapper, Patient } from 'component';",
      "import { hashHistory } from 'react-router';",
      "import {",
      "  fetchactionFunction",
      "} from './action';",
      "",
      "const Header = PageWrapper.Header;",
      "const Bodyer = PageWrapper.Bodyer;",
      "const Footer = PageWrapper.Footer;",
      "const FormItem = Form.Item;",
      "const columns = [",
      "  {",
      "    key: 'index',",
      "    dataIndex: 'index',",
      "    title: '序号',",
      "    width: 100,",
      "    render: (text, record, index) => index + 1",
      "  },",
      "];",
      "",
      "class $1 extends React.Component {",
      "  state = {",
      "    tableLoading: false, // table表格loading",
      "  }",
      "  componentDidMount() {",
      "  }",
      "",
      " /**",
      "  * 查询表格数据",
      "  * @param  {[object]} param    [除表单条件外查询条件]",
      "  */",
      " handleFetchList = (param = {}) => {",
      "   const { form } = this.props;",
      "   form.validateFields((err, values) => {",
      "     if (!err) {",
      "       console.log(values);",
      "     }",
      "   });",
      " }",
      "",
      " /**",
      "  * 分页",
      "  * @param  {[type]} page    [当前页码]",
      "  * @param  {[type]} filters [表格筛选条件]",
      "  * @param  {[type]} sorter  [表格排序]",
      "  */",
      " handleTableChange = (page, filters, sorter) => {",
      "   this.handleFetchList({ page_num: page.current });",
      "   // 存储页码到当前路由",
      "   this.handleSaveDataToRouter({ page_num: page.current });",
      " }",
      "",
      "  /**",
      "  * 储存数据到路由中",
      "  * @param {Object} data [description]",
      "  * @param {String} pathname [description]",
      "  */",
      "  handleSaveDataToRouter = (data, pathname = '') => {",
      "    const { location } = this.props;",
      "    hashHistory.push({",
      "      pathname: pathname || location.pathname,",
      "      state: data,",
      "    });",
      "  }",
      "",
      " /**",
      "  * 获取存在路由中的数据",
      "  */",
      "  handleGetDataToRouter = () => {",
      "    const { location } = this.props;",
      "    const { state = {} } = location;",
      "    return state;",
      "  }",
      "",
      "  render() {",
      "    const { tableLoading } = this.state;",  
      "    return (",
      "      <PageWrapper diff={80} border>",
      "        <Header>",
      "          <Form layout={'inline'}>",
      "            <FormItem",
      "              label={''}",
      "            >",
      "              {getFieldDecorator('')(",
      "              )}",
      "            </FormItem>",
      "          </Form>",
      "          <Button style={{ float: 'right' }} type={'primary'} onClick={e => this.handleFetchList()}>查询</Button>",
      "        </Header>",
      "        <Bodyer>",
      "          <Table",
      "            loading={tableLoading}",
      "            columns={columns}",
      "            dataSource={[]}",
      "            rowKey={'id'}",
      "            onChange={this.handleTableChange}",
      "            scroll={{ y: document.documentElement.clientHeight - 280 }}",
      "            pagination={util.pagination()}",
      "          />",
      "        </Bodyer>",
      "      </PageWrapper>",
      "    );",
      "  }",
      "}",
      "export default connect((state) => {",
      "  return {",
      "    data: state,",
      "    cache: state,",
      "  };",
      "})(Form.create()($1));",
      ""
    ],
    "description": "构建列表页"
  },
  "action": {
    "prefix": ".action",
    "body": [
      " import { fetchutil, util } from 'util';",
      "",
      "/**",
      " * 提交数据",
      " * @return {[type]} [description]",
      " */",
      "export function submit(param) {",
      "  return (dispatch) => {",
      "    return fetchutil.post('', { param });",
      "  };",
      "}",
      "",
      "/**",
      " * 获取数据",
      " * @return {[type]} [description]",
      " */",
      "export function fetch(param) {",
      "  return (dispatch) => {",
      "    return fetchutil.get('', { param }).then((res) => {",
      "      // if (res)",
      "    });",
      "  };",
      "}",
      ""
    ],
    "description": "action文件"
  },
  "reducer": {
    "prefix": ".reducer",
    "body": [
      " import { combineReducers } from 'redux';",
      "",
      " /**",
      "  * 数据列表",
      "  * @param  {Array}  state  [description]",
      "  * @param  {[type]} action [description]",
      "  * @return {[type]}        [description]",
      "  */",
      " const list = (state = { list: [] }, action) => {",
      "   switch (action.type) {",
      "     case 'FETCH_LIST':",
      "       return action.data;",
      "     default:",
      "       return state;",
      "   }",
      " };",
      "",
      " // 合并多个reuucer",
      " export default combineReducers({",
      "   list",
      " });",
      ""
    ],
    "description": "action文件"
  }
}